{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render.navbar/render-items], :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state {}, :ns #clerk/render-fn+opts [{:eval true} (ns pages.rendering-engine.ch3-action-store)], :file "pages/rendering-engine/ch3-action-store.clj", :scope pages.rendering-engine.ch3-action-store, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../"} "Index"] [:span.mx-2 "•"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/bencode/LambdaCraft/blob/4209f011bdecf80819f19d354d2407c07214da50/apps/web/pages/rendering-engine/ch3-action-store.clj"} "pages/rendering-engine/ch3-action-store.clj" [:<> "@" [:span.tabular-nums "4209f01"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :description "← 上一节 | 返回目录"}, :blocks [{:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:link {:rel "stylesheet", :href "/css/style.css"}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/anon-expr-5dtMgNLRaspstAizDL4p3EvQT8RqWA-result"}}, :nextjournal/blob-id "5dsiko9Gsd6xVZKo89mCiuc8BCcAcE"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/anon-expr-5dtMgNLRaspstAizDL4p3EvQT8RqWA-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-result], :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs))], :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value "#object[pages.rendering_engine.ch3_action_store$read_md 0x194273dc \"pages.rendering_engine.ch3_action_store$read_md@194273dc\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x))))], :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/read-md-result"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/read-md-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-result], :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs))], :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "pages.rendering-engine.ch3-action-store/markdown-5drTEf1zN5KHckUvpnx4iJCgTJeUEz"} [:p [:a {:href "/pages/rendering-engine/ch2-dynamic-props"} [:<> "← 上一节"]] [:<> " | "] [:a {:href "/pages/rendering-engine"} [:<> "返回目录"]]] [:hr]], :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/markdown-5drTEf1zN5KHckUvpnx4iJCgTJeUEz"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} identity], :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(clerk/md (read-md \"ch3-action-store.md\"))", :nextjournal/render-opts {:loc {:line 20, :end-line 20, :column 1, :end-column 43}, :id "pages.rendering-engine.ch3-action-store/anon-expr-5drnmJ2TxnWAvasUKhEnr2Q7BtAGFH-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code-block], :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} ["h1" {:id "第3节：组件交互---actionstore"} [:<> "第3节：组件交互 - ActionStore"]] [:blockquote [:p [:<> "这是《Schema驱动的前端渲染引擎设计和实现》系列的第三篇。前两节我们实现了基础渲染和动态属性，这一节将解决组件之间如何交互的问题。"]]] ["h2" {:id "3.1-遇到新需求"} [:<> "3.1 遇到新需求"]] [:p [:<> "假设我们遇到这样的需求："]] [:blockquote [:p [:<> "页面上有一个表单和一个提交按钮，点击按钮时要先验证表单，验证通过才能提交"]]] [:p [:<> "这个需求让我们遇到了新问题："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 问题1：如何配置 onClick？\n{\n  type: 'Button',\n  props: {\n    label: '提交',\n    onClick: '???' // 不能直接写函数\n  }\n}\n\n// 问题2：Button 如何调用 Form 的验证方法？\n{\n  type: 'Form',  // 需要提供 validate() 方法\n}\n{\n  type: 'Button', // 需要调用 Form.validate()\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "3.2-问题分析"} [:<> "3.2 问题分析"]] [:p [:<> "我们需要解决两个核心问题："]] ["h3" {:id "问题1：组件如何暴露方法？"} [:<> "问题1：组件如何暴露方法？"]] [:p [:<> "Form 组件需要提供 "] [:code [:<> "validate()"]] [:<> " 和 "] [:code [:<> "getData()"]] [:<> " 等方法，但在 Schema 配置中，组件只是一个 JSON 对象，如何让它有方法？"]] ["h3" {:id "问题2：组件之间如何调用方法？"} [:<> "问题2：组件之间如何调用方法？"]] [:p [:<> "Button 需要调用 Form 的方法，但它们是两个独立的组件，如何建立联系？"]] ["h2" {:id "3.3-解决方案：actionstore"} [:<> "3.3 解决方案：ActionStore"]] ["h3" {:id "核心思路"} [:<> "核心思路"]] [:p [:<> "我们需要一个"] [:strong [:<> "全局的 Action 注册表"]] [:<> "："]] [:ul [:li [:<> [:<> "组件可以向注册表注册自己的方法"]]] [:li [:<> [:<> "其他组件可以通过组件名查找并调用这些方法"]]]] ["h3" {:id "类型定义"} [:<> "类型定义"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// Action 就是一个函数\ntype Action = (...args: any[]) => any\n\n// ActionStore 存储所有注册的 Action\ntype ActionStore = {\n  actions: Record<string, Action>  // key: \"componentName.actionName\"\n  register: (componentName: string, actionName: string, handler: Action) => void\n  unregister: (componentName: string, actionName: string) => void\n  get: (componentName: string, actionName: string) => Action | undefined\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "实现-actionstore"} [:<> "实现 ActionStore"]] [:p [:<> "我们使用 Zustand 来管理 Action 注册表："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "import { createStore } from 'zustand'\n\nfunction createActionStore() {\n  return createStore<ActionStore>((set, get) => ({\n    actions: {},\n\n    register: (componentName, actionName, handler) => {\n      const key = `${componentName}.${actionName}`\n      set(state => ({\n        actions: {\n          ...state.actions,\n          [key]: handler\n        }\n      }))\n    },\n\n    unregister: (componentName, actionName) => {\n      const key = `${componentName}.${actionName}`\n      set(state => {\n        const { [key]: _, ...rest } = state.actions\n        return { actions: rest }\n      })\n    },\n\n    get: (componentName, actionName) => {\n      const key = `${componentName}.${actionName}`\n      return get().actions[key]\n    }\n  }))\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "提供-context"} [:<> "提供 Context"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "import { createContext, useContext, useRef } from 'react'\nimport type { StoreApi } from 'zustand'\n\nconst ActionStoreContext = createContext<StoreApi<ActionStore> | null>(null)\n\nfunction ActionStoreProvider({ children }: { children: React.ReactNode }) {\n  const storeRef = useRef<StoreApi<ActionStore>>()\n\n  if (!storeRef.current) {\n    storeRef.current = createActionStore()\n  }\n\n  return (\n    <ActionStoreContext.Provider value={storeRef.current}>\n      {children}\n    </ActionStoreContext.Provider>\n  )\n}\n\nfunction useActionStore() {\n  const store = useContext(ActionStoreContext)\n  if (!store) {\n    throw new Error('useActionStore must be used within ActionStoreProvider')\n  }\n  return store\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "actionprovider---注册-action-的组件"} [:<> "ActionProvider - 注册 Action 的组件"]] [:p [:<> "我们使用一个特殊的组件来注册 Action："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type ActionProviderProps = {\n  name: string      // 组件名\n  action: string    // action 名\n  handler: Action   // 处理函数\n}\n\nfunction ActionProvider({ name, action, handler }: ActionProviderProps) {\n  const store = useActionStore()\n\n  useEffect(() => {\n    const { register, unregister } = store.getState()\n    register(name, action, handler)\n    return () => {\n      unregister(name, action)\n    }\n  }, [store, name, action, handler])\n\n  return null  // 不渲染任何内容\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:strong [:<> "核心思想"]] [:<> "："]] [:ul [:li [:<> [:<> "ActionProvider 是一个纯副作用组件"]]] [:li [:<> [:<> "当组件挂载时注册 Action"]]] [:li [:<> [:<> "当组件卸载时移除 Action"]]] [:li [:<> [:<> "不渲染任何内容（返回 null）"]]]] [:p [:strong [:<> "关键优势"]] [:<> "："]] [:ol [:li [:<> [:strong [:<> "动态能力监听"]] [:<> "：Action 只在组件渲染时可用"]]] [:li [:<> [:strong [:<> "条件注册"]] [:<> "：可以根据条件决定是否渲染 ActionProvider"]]]] ["h3" {:id "获取-action-的-hook"} [:<> "获取 Action 的 Hook"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "function useGetAction() {\n  const store = useActionStore()\n\n  return useCallback((componentName: string, actionName: string) => {\n    const { get } = store.getState()\n    return get(componentName, actionName)\n  }, [store])\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "3.4-条件注册-action"} [:<> "3.4 条件注册 Action"]] [:p [:<> "ActionProvider 的一个重要优势是可以根据条件决定是否注册 Action："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 示例：打印功能只在某些条件下可用\nconst PrintButton = ({ enabled }: { enabled: boolean }) => {\n  const handlePrint = () => {\n    console.log('打印...')\n  }\n\n  return (\n    <>\n      <button disabled={!enabled}>打印</button>\n      {/* 只有在 enabled 时才注册 print action */}\n      {enabled && (\n        <ActionProvider name=\"printBtn\" action=\"print\" handler={handlePrint} />\n      )}\n    </>\n  )\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:strong [:<> "工作原理："]]] [:ol [:li [:<> [:<> "当 "] [:code [:<> "enabled = false"]] [:<> " 时，ActionProvider 不渲染，print action 不可用"]]] [:li [:<> [:<> "当 "] [:code [:<> "enabled = true"]] [:<> " 时，ActionProvider 渲染，print action 注册"]]] [:li [:<> [:<> "其他组件通过 "] [:code [:<> "getAction('printBtn', 'print')"]] [:<> " 获取时："]] [:ul [:li [:<> [:<> "enabled = false → 返回 undefined"]]] [:li [:<> [:<> "enabled = true → 返回 handlePrint 函数"]]]]]] [:p [:strong [:<> "使用场景："]]] [:ul [:li [:<> [:<> "根据权限动态开启/关闭功能"]]] [:li [:<> [:<> "根据表单状态决定是否允许提交"]]] [:li [:<> [:<> "根据数据加载状态决定功能可用性"]]]] ["h2" {:id "3.5-实现表单组件"} [:<> "3.5 实现表单组件"]] [:p [:<> "现在我们可以实现一个带方法的 Form 组件："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type FormProps = {\n  name: string  // 组件名，用于注册 Action\n  children?: React.ReactNode\n}\n\nconst Form = ({ name, children }: FormProps) => {\n  const [values, setValues] = useState<Record<string, any>>({})\n\n  // 验证方法\n  const validate = useCallback(() => {\n    // 简单验证：检查是否有空值\n    const emptyFields = Object.entries(values)\n      .filter(([_, value]) => !value)\n      .map(([key]) => key)\n\n    if (emptyFields.length > 0) {\n      return {\n        success: false,\n        message: `请填写: ${emptyFields.join(', ')}`\n      }\n    }\n\n    return { success: true }\n  }, [values])\n\n  // 获取数据方法\n  const getData = useCallback(() => {\n    return values\n  }, [values])\n\n  // 提供 form context 给子组件\n  const handleFieldChange = (fieldName: string, value: any) => {\n    setValues(prev => ({ ...prev, [fieldName]: value }))\n  }\n\n  return (\n    <form style={{ padding: 20, border: '1px solid #ccc' }}>\n      {/* 使用 ActionProvider 注册方法 */}\n      <ActionProvider name={name} action=\"validate\" handler={validate} />\n      <ActionProvider name={name} action=\"getData\" handler={getData} />\n\n      <FormContext.Provider value={{ values, onChange: handleFieldChange }}>\n        {children}\n      </FormContext.Provider>\n    </form>\n  )\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "实现 Input 组件："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type InputProps = {\n  name: string\n  placeholder?: string\n}\n\nconst FormContext = createContext<{\n  values: Record<string, any>\n  onChange: (name: string, value: any) => void\n} | null>(null)\n\nconst Input = ({ name, placeholder }: InputProps) => {\n  const ctx = useContext(FormContext)\n  const value = ctx?.values[name] || ''\n\n  return (\n    <div style={{ marginBottom: 10 }}>\n      <input\n        value={value}\n        placeholder={placeholder}\n        onChange={e => ctx?.onChange(name, e.target.value)}\n        style={{ padding: 5, border: '1px solid #ccc' }}\n      />\n    </div>\n  )\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "3.6-button-调用-form-的方法"} [:<> "3.6 Button 调用 Form 的方法"]] [:p [:<> "现在我们需要让 Button 可以配置 onClick，并在点击时调用 Form 的方法。"]] ["h3" {:id "扩展-context"} [:<> "扩展 Context"]] [:p [:<> "在渲染上下文中注入 "] [:code [:<> "getAction"]] [:<> "："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type Context = {\n  user: {\n    name: string\n    role: string\n  }\n  getAction: (componentName: string, actionName: string) => Action | undefined\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "更新-createengine"} [:<> "更新 createEngine"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "function createEngine(\n  registry: Registry,\n  getAction: (componentName: string, actionName: string) => Action | undefined\n) {\n  const evaluate = createEvaluator()\n\n  const render = (schema: Schema, context: Context): React.ReactElement => {\n    const Component = registry.get(schema.type)\n\n    if (!Component) {\n      return <div style={{ color: 'red' }}>\n        Component \"{schema.type}\" not found\n      </div>\n    }\n\n    // 注入 getAction 到 context\n    const enhancedContext = {\n      ...context,\n      getAction\n    }\n\n    const props = schema.props\n      ? evaluateProps(schema.props, enhancedContext, evaluate)\n      : {}\n\n    if (schema.children && schema.children.length > 0) {\n      props.children = schema.children.map((child, index) => (\n        <React.Fragment key={index}>\n          {render(child, enhancedContext)}\n        </React.Fragment>\n      ))\n    }\n\n    return createElement(Component, props)\n  }\n\n  return render\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "实现带事件的-button"} [:<> "实现带事件的 Button"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type ButtonProps = {\n  label: string\n  onClick?: () => void | Promise<void>\n}\n\nconst Button = ({ label, onClick }: ButtonProps) => {\n  const [loading, setLoading] = useState(false)\n\n  const handleClick = async () => {\n    if (!onClick) return\n\n    setLoading(true)\n    try {\n      await onClick()\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={loading}\n      style={{ padding: '5px 15px', cursor: 'pointer' }}\n    >\n      {loading ? '处理中...' : label}\n    </button>\n  )\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "使用示例"} [:<> "使用示例"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const schema = {\n  type: 'Box',\n  children: [\n    {\n      type: 'Form',\n      props: { name: 'userForm' },\n      children: [\n        {\n          type: 'Input',\n          props: { name: 'username', placeholder: '用户名' }\n        },\n        {\n          type: 'Input',\n          props: { name: 'email', placeholder: '邮箱' }\n        }\n      ]\n    },\n    {\n      type: 'Button',\n      props: {\n        label: '提交',\n        onClick$: `async ctx => {\n          // 调用表单验证\n          const validate = ctx.getAction('userForm', 'validate')\n          if (!validate) {\n            alert('表单未就绪')\n            return\n          }\n\n          const result = validate()\n          if (!result.success) {\n            alert(result.message)\n            return\n          }\n\n          // 获取表单数据\n          const getData = ctx.getAction('userForm', 'getData')\n          const data = getData()\n          console.log('提交数据:', data)\n          alert('提交成功！')\n        }`\n      }\n    }\n  ]\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:strong [:<> "运行效果："]]] [:ol [:li [:<> [:<> "用户输入用户名和邮箱"]]] [:li [:<> [:<> "点击提交按钮"]]] [:li [:<> [:<> "调用表单验证，如果有空字段则提示"]]] [:li [:<> [:<> "验证通过后获取数据并提交"]]]] ["h2" {:id "3.7-延迟执行问题"} [:<> "3.7 延迟执行问题"]] [:p [:<> "在实际使用中，我们可能遇到这样的场景："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "{\n  type: 'Button',\n  props: {\n    label: '初始化',\n    onClick$: `ctx => {\n      // 页面加载时立即调用\n      ctx.getAction('myForm', 'reset')()\n    }`\n  }\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:strong [:<> "问题"]] [:<> "：如果 Button 比 Form 先渲染，调用时 Form 的 Action 还没注册，"] [:code [:<> "getAction"]] [:<> " 会返回 "] [:code [:<> "undefined"]] [:<> "。"]] ["h3" {:id "解决方案：deferred-机制"} [:<> "解决方案：Deferred 机制"]] [:p [:<> "我们扩展 ActionStore，支持延迟执行："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type ActionStore = {\n  actions: Record<string, Action>\n  defers: Record<string, Array<(handler: Action) => any>>  // 新增：延迟队列\n  register: (componentName: string, actionName: string, handler: Action) => void\n  unregister: (componentName: string, actionName: string) => void\n  get: (componentName: string, actionName: string, deferred?: boolean) => Action | undefined\n}\n\nfunction createActionStore() {\n  return createStore<ActionStore>((set, get) => ({\n    actions: {},\n    defers: {},\n\n    register: (componentName, actionName, handler) => {\n      const key = `${componentName}.${actionName}`\n      set(state => ({\n        actions: { ...state.actions, [key]: handler }\n      }))\n\n      // 执行延迟的调用\n      const state = get()\n      const deferList = state.defers[key]\n      if (deferList && deferList.length > 0) {\n        deferList.forEach(fn => fn(handler))\n        set(state => {\n          const { [key]: _, ...rest } = state.defers\n          return { defers: rest }\n        })\n      }\n    },\n\n    unregister: (componentName, actionName) => {\n      const key = `${componentName}.${actionName}`\n      set(state => {\n        const { [key]: _, ...rest } = state.actions\n        return { actions: rest }\n      })\n    },\n\n    get: (componentName, actionName, deferred = false) => {\n      const key = `${componentName}.${actionName}`\n      const handler = get().actions[key]\n\n      if (handler) {\n        return handler\n      }\n\n      if (deferred) {\n        // 返回代理函数\n        return (...args: any[]) => {\n          console.log('deferred call:', key, args)\n          set(state => {\n            const list = state.defers[key] || []\n            return {\n              defers: {\n                ...state.defers,\n                [key]: [...list, (handler: Action) => handler(...args)]\n              }\n            }\n          })\n        }\n      }\n\n      return undefined\n    }\n  }))\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "使用方式"} [:<> "使用方式"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const getAction = useGetAction()\n\n// 不使用 deferred，如果 Action 不存在会返回 undefined\nconst fn = getAction('myForm', 'validate')\nif (fn) {\n  fn()\n}\n\n// 使用 deferred，即使 Action 不存在也返回函数\n// 当 Action 注册后会自动执行\nconst fn = getAction('myForm', 'validate', true)\nfn()  // 安全，不会报错", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "工作流程"} [:<> "工作流程"]] [:ol [:li [:p [:strong [:<> "调用时 Action 未注册"]] [:<> "："]] [:ul [:li [:<> [:code [:<> "getAction('myForm', 'validate', true)"]] [:<> " 返回代理函数"]]] [:li [:<> [:<> "调用代理函数时，参数被存储到 defers 队列"]]]]] [:li [:p [:strong [:<> "Action 注册时"]] [:<> "："]] [:ul [:li [:<> [:<> "ActionProvider 调用 "] [:code [:<> "register('myForm', 'validate', handler)"]]]] [:li [:<> [:<> "检查 defers 队列，发现有延迟调用"]]] [:li [:<> [:<> "执行所有延迟的调用："] [:code [:<> "handler(...args)"]]]] [:li [:<> [:<> "清空该 Action 的延迟队列"]]]]]] ["h2" {:id "3.8-页面级隔离"} [:<> "3.8 页面级隔离"]] [:p [:<> "目前我们的 ActionStore 是全局的，如果页面上有多个独立的区域（比如多个 Modal），它们会互相干扰。"]] ["h3" {:id "解决方案"} [:<> "解决方案"]] [:p [:<> "每个页面创建独立的 Store："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "function Page({ schema }: { schema: Schema }) {\n  // 每个页面创建独立的 ActionStore\n  const actionStoreRef = useRef<StoreApi<ActionStore>>()\n\n  if (!actionStoreRef.current) {\n    actionStoreRef.current = createActionStore()\n  }\n\n  const getAction = useCallback((componentName: string, actionName: string, deferred?: boolean) => {\n    return actionStoreRef.current!.getState().get(componentName, actionName, deferred)\n  }, [])\n\n  const render = useMemo(() => {\n    return createEngine(registry, getAction)\n  }, [getAction])\n\n  return (\n    <ActionStoreContext.Provider value={actionStoreRef.current}>\n      {render(schema, { user: { name: '张三', role: 'admin' } })}\n    </ActionStoreContext.Provider>\n  )\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "现在每个 Page 组件都有独立的 ActionStore，互不干扰。"]] ["h2" {:id "3.9-完整示例"} [:<> "3.9 完整示例"]] [:p [:<> "让我们整合所有功能："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "import React, {\n  createElement,\n  createContext,\n  useContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react'\nimport { createStore } from 'zustand'\nimport type { StoreApi } from 'zustand'\n\n// ============ 类型定义 ============\ntype Schema = {\n  type: string\n  props?: Record<string, unknown>\n  children?: Schema[]\n}\n\ntype Action = (...args: any[]) => any\n\ntype ActionStore = {\n  actions: Record<string, Action>\n  defers: Record<string, Array<(handler: Action) => any>>\n  register: (componentName: string, actionName: string, handler: Action) => void\n  unregister: (componentName: string, actionName: string) => void\n  get: (componentName: string, actionName: string, deferred?: boolean) => Action | undefined\n}\n\ntype Context = {\n  user: {\n    name: string\n    role: string\n  }\n  getAction: (componentName: string, actionName: string, deferred?: boolean) => Action | undefined\n}\n\ntype Registry = {\n  register: (name: string, component: React.ComponentType<any>) => void\n  get: (name: string) => React.ComponentType<any> | undefined\n}\n\n// ============ ActionStore ============\nfunction createActionStore() {\n  return createStore<ActionStore>((set, get) => ({\n    actions: {},\n    defers: {},\n\n    register: (componentName, actionName, handler) => {\n      const key = `${componentName}.${actionName}`\n      set(state => ({\n        actions: { ...state.actions, [key]: handler }\n      }))\n\n      const state = get()\n      const deferList = state.defers[key]\n      if (deferList && deferList.length > 0) {\n        deferList.forEach(fn => fn(handler))\n        set(state => {\n          const { [key]: _, ...rest } = state.defers\n          return { defers: rest }\n        })\n      }\n    },\n\n    unregister: (componentName, actionName) => {\n      const key = `${componentName}.${actionName}`\n      set(state => {\n        const { [key]: _, ...rest } = state.actions\n        return { actions: rest }\n      })\n    },\n\n    get: (componentName, actionName, deferred = false) => {\n      const key = `${componentName}.${actionName}`\n      const handler = get().actions[key]\n\n      if (handler) {\n        return handler\n      }\n\n      if (deferred) {\n        return (...args: any[]) => {\n          set(state => {\n            const list = state.defers[key] || []\n            return {\n              defers: {\n                ...state.defers,\n                [key]: [...list, (handler: Action) => handler(...args)]\n              }\n            }\n          })\n        }\n      }\n\n      return undefined\n    }\n  }))\n}\n\nconst ActionStoreContext = createContext<StoreApi<ActionStore> | null>(null)\n\nfunction useActionStore() {\n  const store = useContext(ActionStoreContext)\n  if (!store) throw new Error('useActionStore must be used within ActionStoreProvider')\n  return store\n}\n\nfunction ActionProvider({ name, action, handler }: {\n  name: string\n  action: string\n  handler: Action\n}) {\n  const store = useActionStore()\n  useEffect(() => {\n    const { register, unregister } = store.getState()\n    register(name, action, handler)\n    return () => unregister(name, action)\n  }, [store, name, action, handler])\n  return null\n}\n\n// ============ 表达式系统 ============\nfunction createEvaluator() {\n  const cache = new Map<string, Function>()\n\n  return (expr: string, context: Context): unknown => {\n    let fn = cache.get(expr)\n    if (!fn) {\n      try {\n        fn = new Function('ctx', `with(ctx) { return ${expr} }`)\n        cache.set(expr, fn)\n      } catch (e) {\n        console.error(`表达式编译错误: ${expr}`, e)\n        return undefined\n      }\n    }\n\n    try {\n      return fn(context)\n    } catch (e) {\n      console.error(`表达式执行错误: ${expr}`, e)\n      return undefined\n    }\n  }\n}\n\nfunction evaluateProps(\n  props: Record<string, unknown>,\n  context: Context,\n  evaluate: ReturnType<typeof createEvaluator>\n): Record<string, unknown> {\n  const result: Record<string, unknown> = {}\n\n  for (const key in props) {\n    if (key.endsWith('$')) {\n      const actualKey = key.slice(0, -1)\n      const expr = props[key] as string\n      result[actualKey] = evaluate(expr, context)\n    } else {\n      result[key] = props[key]\n    }\n  }\n\n  return result\n}\n\n// ============ 组件注册 ============\nfunction createRegistry(): Registry {\n  const components: Record<string, React.ComponentType<any>> = {}\n  return {\n    register: (name, component) => {\n      components[name] = component\n    },\n    get: (name) => components[name]\n  }\n}\n\n// ============ 渲染引擎 ============\nfunction createEngine(\n  registry: Registry,\n  getAction: (componentName: string, actionName: string, deferred?: boolean) => Action | undefined\n) {\n  const evaluate = createEvaluator()\n\n  const render = (schema: Schema, userContext: Omit<Context, 'getAction'>): React.ReactElement => {\n    const context: Context = { ...userContext, getAction }\n    const Component = registry.get(schema.type)\n\n    if (!Component) {\n      return <div style={{ color: 'red' }}>\n        Component \"{schema.type}\" not found\n      </div>\n    }\n\n    const props = schema.props\n      ? evaluateProps(schema.props, context, evaluate)\n      : {}\n\n    if (schema.children && schema.children.length > 0) {\n      props.children = schema.children.map((child, index) => (\n        <React.Fragment key={index}>\n          {render(child, userContext)}\n        </React.Fragment>\n      ))\n    }\n\n    return createElement(Component, props)\n  }\n\n  return render\n}\n\n// ============ 组件实现 ============\nconst Box = ({ children }: { children?: React.ReactNode }) => (\n  <div style={{ marginBottom: 10 }}>{children}</div>\n)\n\nconst Button = ({ label, onClick }: {\n  label: string\n  onClick?: () => void | Promise<void>\n}) => {\n  const [loading, setLoading] = useState(false)\n\n  const handleClick = async () => {\n    if (!onClick) return\n    setLoading(true)\n    try {\n      await onClick()\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={loading}\n      style={{ padding: '5px 15px', cursor: 'pointer' }}\n    >\n      {loading ? '处理中...' : label}\n    </button>\n  )\n}\n\nconst FormContext = createContext<{\n  values: Record<string, any>\n  onChange: (name: string, value: any) => void\n} | null>(null)\n\nconst Form = ({ name, children }: {\n  name: string\n  children?: React.ReactNode\n}) => {\n  const [values, setValues] = useState<Record<string, any>>({})\n\n  const validate = useCallback(() => {\n    const emptyFields = Object.entries(values)\n      .filter(([_, value]) => !value)\n      .map(([key]) => key)\n\n    if (emptyFields.length > 0) {\n      return {\n        success: false,\n        message: `请填写: ${emptyFields.join(', ')}`\n      }\n    }\n\n    return { success: true }\n  }, [values])\n\n  const getData = useCallback(() => {\n    return values\n  }, [values])\n\n  const handleFieldChange = (fieldName: string, value: any) => {\n    setValues(prev => ({ ...prev, [fieldName]: value }))\n  }\n\n  return (\n    <form style={{ padding: 20, border: '1px solid #ccc', marginBottom: 10 }}>\n      <ActionProvider name={name} action=\"validate\" handler={validate} />\n      <ActionProvider name={name} action=\"getData\" handler={getData} />\n\n      <FormContext.Provider value={{ values, onChange: handleFieldChange }}>\n        {children}\n      </FormContext.Provider>\n    </form>\n  )\n}\n\nconst Input = ({ name, placeholder }: {\n  name: string\n  placeholder?: string\n}) => {\n  const ctx = useContext(FormContext)\n  const value = ctx?.values[name] || ''\n\n  return (\n    <div style={{ marginBottom: 10 }}>\n      <input\n        value={value}\n        placeholder={placeholder}\n        onChange={e => ctx?.onChange(name, e.target.value)}\n        style={{ padding: 5, border: '1px solid #ccc' }}\n      />\n    </div>\n  )\n}\n\n// ============ 使用示例 ============\nconst registry = createRegistry()\nregistry.register('Box', Box)\nregistry.register('Button', Button)\nregistry.register('Form', Form)\nregistry.register('Input', Input)\n\nfunction Page({ schema }: { schema: Schema }) {\n  const actionStoreRef = useRef<StoreApi<ActionStore>>()\n\n  if (!actionStoreRef.current) {\n    actionStoreRef.current = createActionStore()\n  }\n\n  const getAction = useCallback((componentName: string, actionName: string, deferred?: boolean) => {\n    return actionStoreRef.current!.getState().get(componentName, actionName, deferred)\n  }, [])\n\n  const render = useMemo(() => {\n    return createEngine(registry, getAction)\n  }, [getAction])\n\n  return (\n    <ActionStoreContext.Provider value={actionStoreRef.current}>\n      {render(schema, { user: { name: '张三', role: 'admin' } })}\n    </ActionStoreContext.Provider>\n  )\n}\n\nconst schema: Schema = {\n  type: 'Box',\n  children: [\n    {\n      type: 'Form',\n      props: { name: 'userForm' },\n      children: [\n        {\n          type: 'Input',\n          props: { name: 'username', placeholder: '用户名' }\n        },\n        {\n          type: 'Input',\n          props: { name: 'email', placeholder: '邮箱' }\n        }\n      ]\n    },\n    {\n      type: 'Button',\n      props: {\n        label: '提交',\n        onClick$: `async ctx => {\n          const validate = ctx.getAction('userForm', 'validate')\n          if (!validate) {\n            alert('表单未就绪')\n            return\n          }\n\n          const result = validate()\n          if (!result.success) {\n            alert(result.message)\n            return\n          }\n\n          const getData = ctx.getAction('userForm', 'getData')\n          const data = getData()\n          alert('提交成功: ' + JSON.stringify(data))\n        }`\n      }\n    }\n  ]\n}\n\nfunction App() {\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>ActionStore 示例</h1>\n      <Page schema={schema} />\n    </div>\n  )\n}\n\nexport default App", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "3.10-本节小结"} [:<> "3.10 本节小结"]] [:p [:<> "这一节我们引入了 ActionStore，解决了组件间方法调用的问题。"]] [:p [:<> "实现的功能："]] [:ul [:li [:<> [:<> "ActionProvider：组件方法注册"]]] [:li [:<> [:<> "useGetAction：方法调用"]]] [:li [:<> [:<> "条件注册：根据条件动态开启/关闭能力"]]] [:li [:<> [:<> "延迟执行：deferred 机制解决时序问题"]]] [:li [:<> [:<> "页面级隔离：独立的 Store 实例"]]]] [:p [:<> "核心代码："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 1. 注册 Action\n<ActionProvider name=\"myForm\" action=\"validate\" handler={validateFn} />\n\n// 2. 调用 Action（普通）\nconst fn = ctx.getAction('myForm', 'validate')\nif (fn) {\n  fn()\n}\n\n// 3. 调用 Action（延迟）\nconst fn = ctx.getAction('myForm', 'validate', true)\nfn()  // 安全，Action 注册后会自动执行\n\n// 4. 条件注册\n{enabled && <ActionProvider name=\"btn\" action=\"print\" handler={printFn} />}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "采用的设计："]] [:ul [:li [:<> [:<> "ActionProvider 作为组件，实现动态能力监听"]]] [:li [:<> [:<> "使用 Zustand 管理 Action 注册表"]]] [:li [:<> [:<> "deferred 机制解决异步注册问题"]]] [:li [:<> [:<> "页面级隔离避免冲突"]]]] [:p [:<> "还没解决的问题："]] [:ul [:li [:<> [:<> "组件间如何共享数据？"]]] [:li [:<> [:<> "数据变化如何自动更新 UI？"]]] [:li [:<> [:<> "如何避免通过组件名耦合？"]]]] [:p [:<> "下一节我们将引入 StateStore，解决组件间的数据共享和响应式更新问题。"]]], :nextjournal/visibility {:code :show, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} identity], :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/anon-expr-5drnmJ2TxnWAvasUKhEnr2Q7BtAGFH-result-1"}}, :nextjournal/blob-id "5drbA7qCjxhmA8AXeYCVLt4CxYfG5m"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/anon-expr-5drnmJ2TxnWAvasUKhEnr2Q7BtAGFH-result-1"}, :nextjournal/visibility {:code :show, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-result], :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs))], :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "pages.rendering-engine.ch3-action-store/markdown-5dtLuo6B5YkWtJgJstvXySwQM7Vfze"} [:hr] [:p [:a {:href "/pages/rendering-engine/ch2-dynamic-props"} [:<> "← 上一节"]] [:<> " | "] [:a {:href "/pages/rendering-engine"} [:<> "返回目录"]]]], :nextjournal/render-opts {:id "pages.rendering-engine.ch3-action-store/markdown-5dtLuo6B5YkWtJgJstvXySwQM7Vfze"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} identity], :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-notebook], :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}