{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render.navbar/render-items], :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state {}, :ns #clerk/render-fn+opts [{:eval true} (ns pages.rendering-engine.ch1-basic-rendering)], :file "pages/rendering-engine/ch1-basic-rendering.clj", :scope pages.rendering-engine.ch1-basic-rendering, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../"} "Index"] [:span.mx-2 "•"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/bencode/LambdaCraft/blob/4209f011bdecf80819f19d354d2407c07214da50/apps/web/pages/rendering-engine/ch1-basic-rendering.clj"} "pages/rendering-engine/ch1-basic-rendering.clj" [:<> "@" [:span.tabular-nums "4209f01"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :description "← 返回目录 | 下一节 →"}, :blocks [{:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:link {:rel "stylesheet", :href "/css/style.css"}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/anon-expr-5dtMgNLRaspstAizDL4p3EvQT8RqWA-result"}}, :nextjournal/blob-id "5dsiko9Gsd6xVZKo89mCiuc8BCcAcE"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/anon-expr-5dtMgNLRaspstAizDL4p3EvQT8RqWA-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-result], :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs))], :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value "#object[pages.rendering_engine.ch1_basic_rendering$read_md 0x4044b44f \"pages.rendering_engine.ch1_basic_rendering$read_md@4044b44f\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x))))], :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/read-md-result"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/read-md-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-result], :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs))], :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "pages.rendering-engine.ch1-basic-rendering/markdown-5dsrfziRbDf5gCmVpheeeyUCRvuFmt"} [:p [:a {:href "/pages/rendering-engine"} [:<> "← 返回目录"]] [:<> " | "] [:a {:href "/pages/rendering-engine/ch2-dynamic-props"} [:<> "下一节 →"]]] [:hr]], :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/markdown-5dsrfziRbDf5gCmVpheeeyUCRvuFmt"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} identity], :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(clerk/md (read-md \"ch1-basic-rendering.md\"))", :nextjournal/render-opts {:loc {:line 20, :end-line 20, :column 1, :end-column 46}, :id "pages.rendering-engine.ch1-basic-rendering/anon-expr-5dsTmv6UkAwNiktuWuSjLaA1ZBunKC-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code-block], :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} ["h1" {:id "第1节：最简单的渲染引擎"} [:<> "第1节：最简单的渲染引擎"]] [:blockquote [:p [:<> "这是《Schema驱动的前端渲染引擎设计和实现》系列的第一篇。我们将从最基础的功能开始，逐步构建出一个完整的渲染引擎。每一步都会展示遇到的问题和解决思路。"]]] ["h2" {:id "1.1-从一个需求开始"} [:<> "1.1 从一个需求开始"]] [:p [:<> "假设我们要做一个低代码平台，第一个需求是："]] [:blockquote [:p [:<> "用户通过拖拽添加一个按钮，配置按钮的文本，然后能在页面上看到这个按钮。"]]] [:p [:<> "要实现这个功能，需要两部分："]] [:ol [:li [:<> [:<> "用 JSON 配置来描述按钮"]]] [:li [:<> [:<> "写一个函数把 JSON 配置渲染成 React 组件"]]]] ["h2" {:id "1.2-设计-schema"} [:<> "1.2 设计 Schema"]] [:p [:<> "首先，我们需要设计一个 JSON 格式来描述按钮："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const schema = {\n  type: 'Button',\n  props: {\n    label: '点击我'\n  }\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "这个格式很简单："]] [:ul [:li [:<> [:code [:<> "type"]] [:<> " 表示组件类型"]]] [:li [:<> [:code [:<> "props"]] [:<> " 是组件的属性"]]]] [:p [:<> "渲染时，这段 JSON 应该变成："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "<Button label=\"点击我\" />", :nextjournal/render-opts {:language "tsx"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "1.3-实现-v0.1：最简渲染函数"} [:<> "1.3 实现 v0.1：最简渲染函数"]] [:p [:<> "让我们写出第一个版本："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// types.ts\ntype Schema = {\n  type: string\n  props?: Record<string, unknown>\n}\n\n// components.ts\nconst Button = ({ label }: { label: string }) => (\n  <button>{label}</button>\n)\n\n// engine.ts\nimport { createElement } from 'react'\n\nconst componentMap = {\n  Button\n}\n\nfunction render(schema: Schema) {\n  const Component = componentMap[schema.type]\n  if (!Component) {\n    throw new Error(`Component ${schema.type} not found`)\n  }\n  return createElement(Component, schema.props)\n}\n\n// 使用\nfunction App() {\n  const schema = {\n    type: 'Button',\n    props: { label: '点击我' }\n  }\n  return render(schema)\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:strong [:<> "运行效果："]]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "<button>点击我</button>", :nextjournal/render-opts {:language "html"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "这样就完成了最基本的 Schema 到组件的转换。"]] ["h2" {:id "1.4-支持更多组件"} [:<> "1.4 支持更多组件"]] [:p [:<> "接下来需要支持更多组件类型：输入框、文本、图片等。"]] [:p [:<> "扩展 componentMap："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const Input = ({ placeholder }: { placeholder?: string }) => (\n  <input placeholder={placeholder} />\n)\n\nconst Text = ({ content }: { content: string }) => (\n  <span>{content}</span>\n)\n\nconst Image = ({ src, alt }: { src: string; alt?: string }) => (\n  <img src={src} alt={alt} />\n)\n\nconst componentMap = {\n  Button,\n  Input,\n  Text,\n  Image\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "现在可以渲染多种组件了："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const schemas = [\n  { type: 'Text', props: { content: '用户名：' } },\n  { type: 'Input', props: { placeholder: '请输入用户名' } },\n  { type: 'Button', props: { label: '提交' } }\n]\n\nfunction App() {\n  return (\n    <div>\n      {schemas.map((schema, index) => (\n        <div key={index}>{render(schema)}</div>\n      ))}\n    </div>\n  )\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "1.5-支持嵌套结构"} [:<> "1.5 支持嵌套结构"]] [:p [:<> "现在遇到新问题：如何实现表单这样的容器组件？容器里面可以放多个子组件。"]] [:p [:<> "Schema 需要支持 children："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type Schema = {\n  type: string\n  props?: Record<string, unknown>\n  children?: Schema[]  // 新增：子节点\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "更新渲染函数："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "function render(schema: Schema): React.ReactElement {\n  const Component = componentMap[schema.type]\n  if (!Component) {\n    throw new Error(`Component ${schema.type} not found`)\n  }\n\n  const props = { ...schema.props }\n\n  // 递归渲染子节点\n  if (schema.children) {\n    props.children = schema.children.map((child, index) => (\n      <React.Fragment key={index}>\n        {render(child)}\n      </React.Fragment>\n    ))\n  }\n\n  return createElement(Component, props)\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "添加容器组件："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const Form = ({ children }: { children?: React.ReactNode }) => (\n  <form style={{ padding: 20, border: '1px solid #ccc' }}>\n    {children}\n  </form>\n)\n\nconst Box = ({ children }: { children?: React.ReactNode }) => (\n  <div style={{ marginBottom: 10 }}>\n    {children}\n  </div>\n)\n\nconst componentMap = {\n  Button,\n  Input,\n  Text,\n  Image,\n  Form,\n  Box\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "现在可以描述嵌套结构了："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "const schema = {\n  type: 'Form',\n  children: [\n    {\n      type: 'Box',\n      children: [\n        { type: 'Text', props: { content: '用户名：' } },\n        { type: 'Input', props: { placeholder: '请输入用户名' } }\n      ]\n    },\n    {\n      type: 'Box',\n      children: [\n        { type: 'Text', props: { content: '密码：' } },\n        { type: 'Input', props: { placeholder: '请输入密码' } }\n      ]\n    },\n    {\n      type: 'Button',\n      props: { label: '登录' }\n    }\n  ]\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:strong [:<> "渲染结果："]]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "<form>\n  <div>\n    <span>用户名：</span>\n    <input placeholder=\"请输入用户名\" />\n  </div>\n  <div>\n    <span>密码：</span>\n    <input placeholder=\"请输入密码\" />\n  </div>\n  <button>登录</button>\n</form>", :nextjournal/render-opts {:language "html"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "1.6-优化：组件注册系统"} [:<> "1.6 优化：组件注册系统"]] [:p [:<> "目前 componentMap 写死在代码里，如果要动态注册组件会比较麻烦。我们可以用函数来创建一个注册表："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 类型定义\ntype ComponentMap = Record<string, React.ComponentType<any>>\n\n// 创建注册表\nfunction createRegistry() {\n  const components: ComponentMap = {}\n\n  return {\n    register: (name: string, component: React.ComponentType<any>) => {\n      components[name] = component\n    },\n    get: (name: string) => {\n      return components[name]\n    },\n    getAll: () => components\n  }\n}\n\n// 使用\nconst registry = createRegistry()\n\n// 注册基础组件\nregistry.register('Button', Button)\nregistry.register('Input', Input)\nregistry.register('Text', Text)\nregistry.register('Form', Form)\nregistry.register('Box', Box)", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "定义 Registry 类型："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "type Registry = {\n  register: (name: string, component: React.ComponentType<any>) => void\n  get: (name: string) => React.ComponentType<any> | undefined\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "更新渲染函数，让它接受 registry："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "function createEngine(registry: Registry) {\n  // 递归渲染函数\n  const render = (schema: Schema): React.ReactElement => {\n    const Component = registry.get(schema.type)\n\n    if (!Component) {\n      return <div style={{ color: 'red' }}>\n        Component \"{schema.type}\" not found\n      </div>\n    }\n\n    const props = { ...schema.props }\n\n    if (schema.children && schema.children.length > 0) {\n      props.children = schema.children.map((child, index) => (\n        <React.Fragment key={index}>\n          {render(child)}\n        </React.Fragment>\n      ))\n    }\n\n    return createElement(Component, props)\n  }\n\n  return render\n}\n\n// 使用\nconst registry = createRegistry()\nregistry.register('Button', Button)\nregistry.register('Input', Input)\n// ... 注册其他组件\n\nconst render = createEngine(registry)\n\nfunction App() {\n  const schema = { type: 'Button', props: { label: '点击' } }\n  return render(schema)\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "现在可以动态注册组件了："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 用户可以注册自己的组件\nregistry.register('MyCustomButton', ({ label, icon }) => (\n  <button>\n    <i className={icon} />\n    {label}\n  </button>\n))", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "1.7-完整示例"} [:<> "1.7 完整示例"]] [:p [:<> "让我们整合一下，写一个完整的可运行示例："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "import React, { createElement } from 'react'\nimport ReactDOM from 'react-dom'\n\n// ============ 类型定义 ============\ntype Schema = {\n  type: string\n  props?: Record<string, unknown>\n  children?: Schema[]\n}\n\n// ============ 组件定义 ============\nconst Form = ({ children }: { children?: React.ReactNode }) => (\n  <form style={{ padding: 20, border: '1px solid #ccc', borderRadius: 4 }}>\n    {children}\n  </form>\n)\n\nconst Box = ({ children }: { children?: React.ReactNode }) => (\n  <div style={{ marginBottom: 10 }}>\n    {children}\n  </div>\n)\n\nconst Text = ({ content }: { content: string }) => (\n  <span style={{ marginRight: 10 }}>{content}</span>\n)\n\nconst Input = ({ placeholder }: { placeholder?: string }) => (\n  <input\n    placeholder={placeholder}\n    style={{ padding: 5, border: '1px solid #ccc' }}\n  />\n)\n\nconst Button = ({ label }: { label: string }) => (\n  <button style={{ padding: '5px 15px', cursor: 'pointer' }}>\n    {label}\n  </button>\n)\n\n// ============ 注册系统 ============\ntype Registry = {\n  register: (name: string, component: React.ComponentType<any>) => void\n  get: (name: string) => React.ComponentType<any> | undefined\n}\n\nfunction createRegistry(): Registry {\n  const components: Record<string, React.ComponentType<any>> = {}\n\n  return {\n    register: (name, component) => {\n      components[name] = component\n    },\n    get: (name) => components[name]\n  }\n}\n\n// ============ 渲染引擎 ============\nfunction createEngine(registry: Registry) {\n  const render = (schema: Schema): React.ReactElement => {\n    const Component = registry.get(schema.type)\n\n    if (!Component) {\n      return <div style={{ color: 'red' }}>\n        Component \"{schema.type}\" not found\n      </div>\n    }\n\n    const props = { ...schema.props }\n\n    if (schema.children && schema.children.length > 0) {\n      props.children = schema.children.map((child, index) => (\n        <React.Fragment key={index}>\n          {render(child)}\n        </React.Fragment>\n      ))\n    }\n\n    return createElement(Component, props)\n  }\n\n  return render\n}\n\n// ============ 初始化 ============\nconst registry = createRegistry()\n\nregistry.register('Form', Form)\nregistry.register('Box', Box)\nregistry.register('Text', Text)\nregistry.register('Input', Input)\nregistry.register('Button', Button)\n\nconst render = createEngine(registry)\n\n// ============ Schema 配置 ============\nconst schema: Schema = {\n  type: 'Form',\n  children: [\n    {\n      type: 'Box',\n      children: [\n        { type: 'Text', props: { content: '用户名：' } },\n        { type: 'Input', props: { placeholder: '请输入用户名' } }\n      ]\n    },\n    {\n      type: 'Box',\n      children: [\n        { type: 'Text', props: { content: '密码：' } },\n        { type: 'Input', props: { placeholder: '请输入密码' } }\n      ]\n    },\n    {\n      type: 'Button',\n      props: { label: '登录' }\n    }\n  ]\n}\n\n// ============ 渲染 ============\nfunction App() {\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>最简渲染引擎 v0.1</h1>\n      {render(schema)}\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "1.8-当前实现的局限性"} [:<> "1.8 当前实现的局限性"]] [:p [:<> "到这里，我们已经有了一个可以工作的渲染引擎。但它还有一些明显的限制："]] ["h3" {:id "1.-属性都是静态的"} [:<> "1. 属性都是静态的"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 只能写死\n{ type: 'Text', props: { content: '用户名：' } }\n\n// 无法做到：根据登录用户显示 \"欢迎，张三\"", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "2.-无法处理事件"} [:<> "2. 无法处理事件"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// onClick 怎么配置？\n{\n  type: 'Button',\n  props: {\n    label: '提交',\n    onClick: '???' // 无法配置函数\n  }\n}", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "3.-组件之间无法通信"} [:<> "3. 组件之间无法通信"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 如何让 Input 的值传递给 Button？\n[\n  { type: 'Input' },\n  { type: 'Button' } // 怎么获取 Input 的值？\n]", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h3" {:id "4.-没有状态管理"} [:<> "4. 没有状态管理"]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 用户输入的数据存在哪里？\n// 如何在多个组件间共享数据？", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "1.9-本章小结"} [:<> "1.9 本章小结"]] [:p [:<> "这一节我们从最简单的需求出发，一步步实现了一个基础的渲染引擎。"]] [:p [:<> "实现的功能："]] [:ul [:li [:<> [:<> "Schema 到 React 组件的转换"]]] [:li [:<> [:<> "嵌套结构的渲染"]]] [:li [:<> [:<> "组件注册系统"]]]] [:p [:<> "核心代码："]] [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:nextjournal/value [:div.code-viewer.code-listing [#clerk/render-fn+opts [{:eval true} nextjournal.clerk.render/inspect-presented] {:path [0], :nextjournal/value "// 1. Schema 定义\ntype Schema = {\n  type: string\n  props?: Record<string, unknown>\n  children?: Schema[]\n}\n\n// 2. 创建注册表\nconst registry = createRegistry()\nregistry.register(name, Component)\n\n// 3. 创建渲染引擎\nconst render = createEngine(registry)\n\n// 4. 渲染\nrender(schema)", :nextjournal/render-opts {:language "typescript"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-code], :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-html], :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "采用的设计："]] [:ul [:li [:<> [:<> "使用闭包管理内部状态"]]] [:li [:<> [:<> "函数式风格，避免副作用"]]] [:li [:<> [:<> "通过组合而非继承来扩展功能"]]]] [:p [:<> "还没解决的问题："]] [:ul [:li [:<> [:<> "属性都是静态的，无法根据数据动态变化"]]] [:li [:<> [:<> "无法处理事件（如 onClick）"]]] [:li [:<> [:<> "组件之间无法通信"]]] [:li [:<> [:<> "没有状态管理"]]]] [:p [:<> "下一节我们将解决第一个问题：如何让属性可以动态求值。"]]], :nextjournal/visibility {:code :show, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} identity], :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/anon-expr-5dsTmv6UkAwNiktuWuSjLaA1ZBunKC-result-1"}}, :nextjournal/blob-id "5dtATr4ZKumWQsYm8LvpGMBngenU7F"}, :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/anon-expr-5dsTmv6UkAwNiktuWuSjLaA1ZBunKC-result-1"}, :nextjournal/visibility {:code :show, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-result], :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs))], :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "pages.rendering-engine.ch1-basic-rendering/markdown-5dtCr1K919RVQijt2HLPwpvhbeoaKF"} [:hr] [:p [:a {:href "/pages/rendering-engine"} [:<> "← 返回目录"]] [:<> " | "] [:a {:href "/pages/rendering-engine/ch2-dynamic-props"} [:<> "下一节 →"]]]], :nextjournal/render-opts {:id "pages.rendering-engine.ch1-basic-rendering/markdown-5dtCr1K919RVQijt2HLPwpvhbeoaKF"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} identity], :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #clerk/render-fn+opts [{:render-evaluator :sci} nextjournal.clerk.render/render-notebook], :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}